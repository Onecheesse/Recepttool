<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Receptová Kuchařka</title>
    <!-- Tailwind CSS for modern styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .container {
            max-width: 1000px;
        }
        /* Custom modal styles */
        .modal-overlay {
            background-color: rgba(0, 0, 0, 0.5);
        }
        .active-tab {
            border-bottom: 2px solid #3b82f6;
            color: #3b82f6;
        }
        /* Custom file input styling */
        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
        }
        .file-input-wrapper input[type=file] {
            font-size: 100px;
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            cursor: pointer;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">
    <div class="container mx-auto p-4 md:p-8">
        <h1 class="text-4xl font-bold text-center mb-6 text-gray-900">Receptová Kuchařka</h1>

        <!-- Navigation Tabs -->
        <div class="flex border-b border-gray-300 mb-6">
            <button id="list-tab-btn" class="py-2 px-4 text-lg font-medium text-gray-600 hover:text-gray-900 transition-colors duration-200 active-tab">Seznam receptů</button>
            <button id="form-tab-btn" class="py-2 px-4 text-lg font-medium text-gray-600 hover:text-gray-900 transition-colors duration-200">Vytvořit/Upravit</button>
        </div>

        <!-- Recipe List Page -->
        <div id="recipe-list-page" class="page">
            <div class="mb-6 flex flex-col md:flex-row gap-4">
                <input type="text" id="search-input" placeholder="Hledat recept..." class="flex-grow p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-shadow">
                <select id="complexity-filter" class="p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">Složitost</option>
                    <option value="Snadné">Snadné</option>
                    <option value="Střední">Střední</option>
                    <option value="Složité">Složité</option>
                </select>
                <select id="meal-type-filter" class="p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">Typ jídla</option>
                    <option value="Snídaně">Snídaně</option>
                    <option value="Oběd">Oběd</option>
                    <option value="Večeře">Večeře</option>
                    <option value="Svačina">Svačina</option>
                    <option value="Ostatní">Ostatní</option>
                </select>
            </div>
            
            <div class="flex flex-col sm:flex-row gap-4 mb-6">
                <div class="flex-grow flex items-center gap-2">
                    <label class="block text-sm font-medium text-gray-700">Nahrát JSON:</label>
                    <div class="file-input-wrapper">
                        <button type="button" class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors duration-200">
                            Vybrat soubor
                        </button>
                        <input type="file" id="json-upload" accept=".json">
                    </div>
                </div>
                <button id="download-json-btn" class="px-6 py-3 bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-700 transition-colors duration-200 shadow-md">Stáhnout recepty</button>
            </div>

            <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider cursor-pointer" data-sort="name">Název receptu</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider hidden md:table-cell cursor-pointer" data-sort="prepTime">Doba přípravy</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider hidden sm:table-cell cursor-pointer" data-sort="complexity">Složitost</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider hidden lg:table-cell cursor-pointer" data-sort="calories">Kalorie</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider hidden sm:table-cell cursor-pointer" data-sort="mealType">Typ jídla</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider hidden lg:table-cell cursor-pointer" data-sort="estimatedPrice">Odhadovaná cena</th>
                                <th class="px-6 py-3 text-right text-xs font-semibold text-gray-500 uppercase tracking-wider">Akce</th>
                            </tr>
                        </thead>
                        <tbody id="recipe-table-body" class="bg-white divide-y divide-gray-200">
                            <!-- Recipes will be rendered here by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
            
        </div>

        <!-- Recipe Form Page -->
        <div id="recipe-form-page" class="page hidden bg-white p-6 rounded-xl shadow-lg">
            <h2 id="form-title" class="text-2xl font-bold mb-6 text-center text-gray-900">Vytvořit nový recept</h2>
            <form id="recipe-form">
                <input type="hidden" id="recipe-id">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                    <div>
                        <label for="recipe-name" class="block text-sm font-medium text-gray-700">Název receptu</label>
                        <input type="text" id="recipe-name" class="mt-1 block w-full p-2.5 rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="prep-time" class="block text-sm font-medium text-gray-700">Doba přípravy (min)</label>
                        <input type="number" id="prep-time" class="mt-1 block w-full p-2.5 rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="calories" class="block text-sm font-medium text-gray-700">Kalorie (kcal)</label>
                        <input type="number" id="calories" class="mt-1 block w-full p-2.5 rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="complexity" class="block text-sm font-medium text-gray-700">Složitost</label>
                        <select id="complexity" class="mt-1 block w-full p-2.5 rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <option value="">Nezadáno</option>
                            <option value="Snadné">Snadné</option>
                            <option value="Střední">Střední</option>
                            <option value="Složité">Složité</option>
                        </select>
                    </div>
                    <div>
                        <label for="meal-type" class="block text-sm font-medium text-gray-700">Typ jídla</label>
                        <select id="meal-type" class="mt-1 block w-full p-2.5 rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <option value="">Nezadáno</option>
                            <option value="Snídaně">Snídaně</option>
                            <option value="Oběd">Oběd</option>
                            <option value="Večeře">Večeře</option>
                            <option value="Svačina">Svačina</option>
                            <option value="Ostatní">Ostatní</option>
                        </select>
                    </div>
                    <div>
                        <label for="estimated-price" class="block text-sm font-medium text-gray-700">Odhadovaná cena (Kč)</label>
                        <input type="number" id="estimated-price" class="mt-1 block w-full p-2.5 rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                </div>

                <div class="mb-4">
                    <label for="notes" class="block text-sm font-medium text-gray-700">Poznámky</label>
                    <textarea id="notes" rows="2" class="mt-1 block w-full p-2.5 rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
                </div>

                <div class="mb-4">
                    <label for="ingredients" class="block text-sm font-medium text-gray-700">Seznam surovin (každá na nový řádek)</label>
                    <textarea id="ingredients" rows="4" class="mt-1 block w-full p-2.5 rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
                </div>
                
                <div class="mb-6">
                    <label for="instructions" class="block text-sm font-medium text-gray-700">Návod (každý krok na nový řádek)</label>
                    <textarea id="instructions" rows="6" class="mt-1 block w-full p-2.5 rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
                </div>
                
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Obrázek jídla</label>
                    <div id="image-preview" class="w-full h-48 bg-gray-200 rounded-lg overflow-hidden flex items-center justify-center text-gray-500 mb-4">
                        Žádný obrázek
                    </div>
                    <div class="flex gap-4">
                        <div class="file-input-wrapper">
                            <button type="button" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors duration-200">
                                Nahrát obrázek
                            </button>
                            <input type="file" id="image-upload" accept="image/*">
                        </div>
                        <input type="text" id="image-url" placeholder="Nebo vložit URL obrázku" class="flex-grow p-2.5 rounded-lg border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                </div>

                <div class="flex justify-end gap-4">
                    <button type="button" id="cancel-form-btn" class="px-6 py-3 bg-gray-300 text-gray-800 font-semibold rounded-lg hover:bg-gray-400 transition-colors duration-200 shadow-md">Zrušit</button>
                    <button type="submit" class="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors duration-200 shadow-md">Uložit recept</button>
                </div>
            </form>
        </div>

        <!-- Recipe Detail Modal -->
        <div id="recipe-modal" class="fixed inset-0 z-50 hidden flex items-center justify-center p-4 modal-overlay">
            <div class="bg-white rounded-xl shadow-2xl max-h-screen overflow-y-auto w-full max-w-2xl p-6 relative">
                <button id="close-modal-btn" class="absolute top-4 right-4 text-gray-400 hover:text-gray-700 text-3xl font-light">
                    &times;
                </button>
                <div id="modal-content">
                    <!-- Dynamic content will be injected here -->
                </div>
            </div>
        </div>
        
    </div>

    <!-- Script to handle all logic -->
    <script type="module">
        // Mandatory Firebase imports for the canvas environment.
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);
        
        let userId;

        onAuthStateChanged(auth, async (user) => {
            if (user) {
                userId = user.uid;
            } else {
                try {
                    await signInAnonymously(auth);
                } catch (error) {
                    console.error("Anonymous sign-in failed", error);
                }
            }
        });

        let recipes = []; // Recepty se budou načítat z JSON souborů
        let lastId = 0;
        let imageCache = {}; // Cache pro obrázky, aby se nenačítaly opakovaně
        
        // DOM elements
        const recipeTableBody = document.getElementById('recipe-table-body');
        const recipeModal = document.getElementById('recipe-modal');
        const modalContent = document.getElementById('modal-content');
        const closeBtn = document.getElementById('close-modal-btn');
        const searchInput = document.getElementById('search-input');
        const complexityFilter = document.getElementById('complexity-filter');
        const mealTypeFilter = document.getElementById('meal-type-filter');

        const listTabBtn = document.getElementById('list-tab-btn');
        const formTabBtn = document.getElementById('form-tab-btn');
        const recipeListPage = document.getElementById('recipe-list-page');
        const recipeFormPage = document.getElementById('recipe-form-page');

        const form = document.getElementById('recipe-form');
        const formTitle = document.getElementById('form-title');
        const recipeIdInput = document.getElementById('recipe-id');
        const recipeNameInput = document.getElementById('recipe-name');
        const prepTimeInput = document.getElementById('prep-time');
        const caloriesInput = document.getElementById('calories');
        const complexityInput = document.getElementById('complexity');
        const notesInput = document.getElementById('notes');
        const ingredientsInput = document.getElementById('ingredients');
        const instructionsInput = document.getElementById('instructions');
        const imageUploadInput = document.getElementById('image-upload');
        const imageUrlInput = document.getElementById('image-url');
        const imagePreview = document.getElementById('image-preview');
        const cancelFormBtn = document.getElementById('cancel-form-btn');
        
        const mealTypeInput = document.getElementById('meal-type');
        const estimatedPriceInput = document.getElementById('estimated-price');

        const jsonUploadInput = document.getElementById('json-upload');
        const downloadJsonBtn = document.getElementById('download-json-btn');

        let sortColumn = null;
        let sortDirection = 'asc';

        // Fetch recipes from a JSON subdirectory
        async function fetchRecipes() {
            try {
                // Tato část by v reálné aplikaci četla seznam souborů ze složky
                // Pro demo se používají statické názvy
                const fileNames = ['rizoto.json', 'dynova_polevka.json'];
                recipes = [];
                let maxId = 0;

                for (const fileName of fileNames) {
                    const response = await fetch(`./json/${fileName}`);
                    if (!response.ok) {
                        throw new Error(`Failed to fetch ${fileName}`);
                    }
                    const data = await response.json();
                    recipes.push(data);
                    const id = parseInt(data.id);
                    if (id > maxId) maxId = id;
                }
                lastId = maxId;

                renderRecipes();
            } catch (error) {
                console.error("Error fetching recipes:", error);
                // Fallback to sample data if fetching fails
                recipes = [
                    {
                        id: '1', name: 'Italské rizoto s houbami', prepTime: 45, calories: 550, complexity: 'Střední', notes: 'Klasický italský recept.', image: './img/rizoto.jpg', ingredients: ['rýže', 'houby'], instructions: ['uvař rýži']
                    },
                    {
                        id: '2', name: 'Krémová dýňová polévka', prepTime: 30, calories: 300, complexity: 'Snadné', notes: 'Rychlá a jednoduchá polévka.', image: 'https://placehold.co/400x300/fb923c/000000?text=Dýňová+polévka', ingredients: ['dýně', 'vývar'], instructions: ['uvař dýni']
                    }
                ];
                lastId = 2;
                renderRecipes();
                showTemporaryMessage('Chyba při načítání receptů. Načteny ukázkové recepty.', 'error');
            }
        }

        function renderRecipes() {
            recipeTableBody.innerHTML = '';
            
            const searchTerm = searchInput.value.toLowerCase();
            const selectedComplexity = complexityFilter.value;
            const selectedMealType = mealTypeFilter.value;

            const filteredRecipes = recipes.filter(recipe => {
                const matchesSearch = (recipe.name || '').toLowerCase().includes(searchTerm) ||
                                      (recipe.notes || '').toLowerCase().includes(searchTerm) ||
                                      (recipe.ingredients || []).some(ing => ing.toLowerCase().includes(searchTerm)) ||
                                      (recipe.instructions || []).some(inst => inst.toLowerCase().includes(searchTerm));
                const matchesComplexity = selectedComplexity === '' || recipe.complexity === selectedComplexity;
                const matchesMealType = selectedMealType === '' || recipe.mealType === selectedMealType;
                return matchesSearch && matchesComplexity && matchesMealType;
            });
            
            if (sortColumn) {
                filteredRecipes.sort((a, b) => {
                    let valA = a[sortColumn];
                    let valB = b[sortColumn];

                    if (typeof valA === 'string') {
                        valA = (valA || '').toLowerCase();
                        valB = (valB || '').toLowerCase();
                    }

                    if (valA === undefined || valA === null) valA = sortDirection === 'asc' ? '' : 'zzzzzz';
                    if (valB === undefined || valB === null) valB = sortDirection === 'asc' ? '' : 'zzzzzz';

                    if (valA < valB) return sortDirection === 'asc' ? -1 : 1;
                    if (valA > valB) return sortDirection === 'asc' ? 1 : -1;
                    return 0;
                });
            }

            if (filteredRecipes.length === 0) {
                recipeTableBody.innerHTML = `<tr><td colspan="7" class="p-6 text-center text-gray-500">Nebyly nalezeny žádné recepty.</td></tr>`;
            }

            filteredRecipes.forEach(recipe => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 transition-colors duration-200 cursor-pointer';

                const prepTime = recipe.prepTime ? `${recipe.prepTime} min` : '?';
                const complexity = recipe.complexity ? recipe.complexity : '?';
                const calories = recipe.calories ? `${recipe.calories} kcal` : '?';
                const mealType = recipe.mealType ? recipe.mealType : '?';
                const estimatedPrice = recipe.estimatedPrice ? `${recipe.estimatedPrice} Kč` : '?';

                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${recipe.name || '?'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 hidden md:table-cell">${prepTime}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 hidden sm:table-cell">${complexity}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 hidden lg:table-cell">${calories}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 hidden sm:table-cell">${mealType}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 hidden lg:table-cell">${estimatedPrice}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div class="flex items-center justify-end space-x-2">
                            <button class="text-blue-600 hover:text-blue-900 transition-colors duration-200" data-action="view" data-id="${recipe.id}">
                                Zobrazit
                            </button>
                            <span class="text-gray-300">|</span>
                            <button class="text-yellow-600 hover:text-yellow-900 transition-colors duration-200" data-action="edit" data-id="${recipe.id}">
                                Upravit
                            </button>
                            <span class="text-gray-300">|</span>
                            <button class="text-red-600 hover:text-red-900 transition-colors duration-200" data-action="delete" data-id="${recipe.id}">
                                Smazat
                            </button>
                        </div>
                    </td>
                `;
                recipeTableBody.appendChild(row);
            });
        }
        
        function handleSort(column) {
            if (sortColumn === column) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortColumn = column;
                sortDirection = 'asc';
            }
            renderRecipes();
        }

        function showRecipeDetails(recipe) {
            const prepTime = recipe.prepTime ? `${recipe.prepTime} min` : '?';
            const calories = recipe.calories ? `${recipe.calories} kcal` : '?';
            const estimatedPrice = recipe.estimatedPrice ? `${recipe.estimatedPrice} Kč` : '?';
            const complexity = recipe.complexity ? recipe.complexity : '?';
            const mealType = recipe.mealType ? recipe.mealType : '?';
            const notes = recipe.notes ? `<div class="mt-4 text-gray-700 italic border-l-4 border-gray-300 pl-4">${recipe.notes}</div>` : '';
            const ingredientsList = (recipe.ingredients && recipe.ingredients.length > 0) ? recipe.ingredients.map(ing => `<li>${ing}</li>`).join('') : '<li>?</li>';
            const instructionsList = (recipe.instructions && recipe.instructions.length > 0) ? recipe.instructions.map(inst => `<li class="mb-2">${inst}</li>`).join('') : '<li>?</li>';

            modalContent.innerHTML = `
                <div class="flex flex-col md:flex-row gap-6 mb-6">
                    <img src="${recipe.image}" onerror="this.onerror=null;this.src='https://placehold.co/400x300/6b7280/ffffff?text=Obrázek+není+dostupný';" alt="Obrázek ${recipe.name}" class="rounded-lg shadow-md w-full md:w-1/2 h-48 object-cover">
                    <div class="w-full md:w-1/2">
                        <h2 class="text-3xl font-bold mb-2">${recipe.name || '?'}</h2>
                        <div class="text-sm text-gray-600 space-y-1">
                            <p><strong>Typ jídla:</strong> ${mealType}</p>
                            <p><strong>Doba přípravy:</strong> ${prepTime}</p>
                            <p><strong>Odhadovaná cena:</strong> ${estimatedPrice}</p>
                            <p><strong>Kalorie:</strong> ${calories}</p>
                            <p><strong>Složitost:</strong> ${complexity}</p>
                        </div>
                        ${notes}
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div>
                        <h3 class="text-xl font-semibold mb-2 text-gray-800">Seznam surovin</h3>
                        <ul class="list-disc list-inside space-y-1 text-gray-700">${ingredientsList}</ul>
                    </div>
                    <div>
                        <h3 class="text-xl font-semibold mb-2 text-gray-800">Návod</h3>
                        <ol class="list-decimal list-inside space-y-2 text-gray-700">${instructionsList}</ol>
                    </div>
                </div>
            `;
            recipeModal.classList.remove('hidden');
        }

        function editRecipe(id) {
            const recipe = recipes.find(r => r.id === id);
            if (recipe) {
                formTitle.textContent = `Upravit recept: ${recipe.name}`;
                recipeIdInput.value = recipe.id;
                recipeNameInput.value = recipe.name || '';
                prepTimeInput.value = recipe.prepTime || '';
                caloriesInput.value = recipe.calories || '';
                complexityInput.value = recipe.complexity || '';
                notesInput.value = recipe.notes || '';
                ingredientsInput.value = (recipe.ingredients || []).join('\n');
                instructionsInput.value = (recipe.instructions || []).join('\n');
                mealTypeInput.value = recipe.mealType || '';
                estimatedPriceInput.value = recipe.estimatedPrice || '';
                
                if (recipe.image) {
                    if (imageCache[recipe.image]) {
                        imagePreview.innerHTML = `<img src="${imageCache[recipe.image]}" alt="Náhled obrázku" class="w-full h-full object-cover">`;
                    } else {
                        imagePreview.innerHTML = `<img src="${recipe.image}" onerror="this.onerror=null;this.src='https://placehold.co/400x300/6b7280/ffffff?text=Obrázek+není+dostupný';" alt="Náhled obrázku" class="w-full h-full object-cover">`;
                    }
                } else {
                    imagePreview.innerHTML = 'Žádný obrázek';
                }
                
                imageUrlInput.value = '';
                showPage('form');
            }
        }

        function handleFormSubmit(event) {
            event.preventDefault();
            
            const id = recipeIdInput.value;
            const name = recipeNameInput.value.trim() || null;
            const prepTime = prepTimeInput.value.trim() !== '' ? parseInt(prepTimeInput.value) : null;
            const calories = caloriesInput.value.trim() !== '' ? parseInt(caloriesInput.value) : null;
            const complexity = complexityInput.value.trim() || null;
            const notes = notesInput.value.trim() || null;
            const ingredients = ingredientsInput.value.trim() !== '' ? ingredientsInput.value.split('\n').filter(line => line.trim() !== '') : [];
            const instructions = instructionsInput.value.trim() !== '' ? instructionsInput.value.split('\n').filter(line => line.trim() !== '') : [];
            const mealType = mealTypeInput.value.trim() || null;
            const estimatedPrice = estimatedPriceInput.value.trim() !== '' ? parseInt(estimatedPriceInput.value) : null;

            let image = 'https://placehold.co/400x300/6b7280/ffffff?text=Bez+obrázku';
            if (imageUrlInput.value) {
                image = imageUrlInput.value.trim();
            } else if (imageUploadInput.files.length > 0) {
                const file = imageUploadInput.files[0];
                image = URL.createObjectURL(file);
                // Save the image URL in a cache for temporary display
                imageCache[image] = image;
            } else if (id) {
                const existingRecipe = recipes.find(r => r.id === id);
                if (existingRecipe && existingRecipe.image) {
                    image = existingRecipe.image;
                }
            }


            const newRecipe = { id, name, prepTime, calories, complexity, notes, image, ingredients, instructions, mealType, estimatedPrice };

            if (id) {
                const index = recipes.findIndex(r => r.id === id);
                if (index !== -1) {
                    recipes[index] = newRecipe;
                }
                showTemporaryMessage('Recept byl úspěšně upraven!', 'success');
            } else {
                lastId++;
                newRecipe.id = lastId.toString();
                recipes.push(newRecipe);
                showTemporaryMessage('Nový recept byl úspěšně vytvořen!', 'success');
            }

            clearForm();
            renderRecipes();
            showPage('list');
        }

        function clearForm() {
            form.reset();
            formTitle.textContent = 'Vytvořit nový recept';
            recipeIdInput.value = '';
            imagePreview.innerHTML = 'Žádný obrázek';
            imageUploadInput.value = '';
            imageUrlInput.value = '';
        }

        function handleImageUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const url = URL.createObjectURL(file);
                imagePreview.innerHTML = `<img src="${url}" alt="Náhled obrázku" class="w-full h-full object-cover">`;
                imageUrlInput.value = '';
            }
        }
        
        function handleImageUrlChange(event) {
            const url = event.target.value.trim();
            if (url) {
                imagePreview.innerHTML = `<img src="${url}" onerror="this.onerror=null;this.src='https://placehold.co/400x300/6b7280/ffffff?text=Obrázek+není+dostupný';" alt="Náhled obrázku" class="w-full h-full object-cover">`;
                imageUploadInput.value = '';
            } else {
                imagePreview.innerHTML = 'Žádný obrázek';
            }
        }

        function showTemporaryMessage(message, type) {
            const messageBox = document.createElement('div');
            messageBox.textContent = message;
            messageBox.className = `fixed bottom-4 right-4 p-4 rounded-lg text-white shadow-lg transition-transform transform duration-300 ease-in-out z-50`;
            messageBox.style.transform = 'translateY(100%)';

            if (type === 'success') {
                messageBox.classList.add('bg-green-500');
            } else if (type === 'error') {
                messageBox.classList.add('bg-red-500');
            }

            document.body.appendChild(messageBox);
            setTimeout(() => {
                messageBox.style.transform = 'translateY(0)';
            }, 10);

            setTimeout(() => {
                messageBox.style.transform = 'translateY(100%)';
                messageBox.addEventListener('transitionend', () => messageBox.remove());
            }, 3000);
        }

        function downloadRecipes() {
            // Pro lokální použití se stahují všechny recepty do jednoho souboru
            const jsonString = JSON.stringify(recipes, null, 2);
            const blob = new Blob([jsonString], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'recepty_databaze.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function handleJsonUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const uploadedRecipes = JSON.parse(e.target.result);
                    if (Array.isArray(uploadedRecipes)) {
                        recipes = uploadedRecipes;
                        lastId = recipes.reduce((maxId, recipe) => Math.max(maxId, parseInt(recipe.id)), 0);
                        renderRecipes();
                        showTemporaryMessage('Recepty byly úspěšně nahrány!', 'success');
                    } else {
                        showTemporaryMessage('Neplatný formát JSON souboru. Zkontrolujte, zda se jedná o pole receptů.', 'error');
                    }
                } catch (error) {
                    showTemporaryMessage('Chyba při čtení JSON souboru.', 'error');
                    console.error("Error parsing JSON:", error);
                }
            };
            reader.readAsText(file);
        }

        function showPage(page) {
            recipeListPage.classList.add('hidden');
            recipeFormPage.classList.add('hidden');
            listTabBtn.classList.remove('active-tab');
            formTabBtn.classList.remove('active-tab');
            
            if (page === 'list') {
                recipeListPage.classList.remove('hidden');
                listTabBtn.classList.add('active-tab');
            } else if (page === 'form') {
                recipeFormPage.classList.remove('hidden');
                formTabBtn.classList.add('active-tab');
            }
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', () => {
            fetchRecipes();
        });

        recipeTableBody.addEventListener('click', (event) => {
            const target = event.target;
            const action = target.dataset.action;
            const id = target.dataset.id;
            if (action && id) {
                const recipe = recipes.find(r => r.id === id);
                if (!recipe) return;

                if (action === 'view') {
                    showRecipeDetails(recipe);
                } else if (action === 'edit') {
                    editRecipe(id);
                } else if (action === 'delete') {
                    if (confirm('Opravdu chcete smazat tento recept?')) {
                        recipes = recipes.filter(r => r.id !== id);
                        renderRecipes();
                        showTemporaryMessage('Recept byl úspěšně smazán.', 'success');
                    }
                }
            }
        });
        
        document.querySelectorAll('th[data-sort]').forEach(header => {
            header.addEventListener('click', () => {
                handleSort(header.dataset.sort);
            });
        });

        closeBtn.addEventListener('click', () => {
            recipeModal.classList.add('hidden');
        });

        recipeModal.addEventListener('click', (e) => {
            if (e.target === recipeModal) {
                recipeModal.classList.add('hidden');
            }
        });

        searchInput.addEventListener('input', renderRecipes);
        complexityFilter.addEventListener('change', renderRecipes);
        mealTypeFilter.addEventListener('change', renderRecipes);

        listTabBtn.addEventListener('click', () => showPage('list'));
        formTabBtn.addEventListener('click', () => {
            clearForm();
            showPage('form');
        });

        form.addEventListener('submit', handleFormSubmit);
        imageUploadInput.addEventListener('change', handleImageUpload);
        imageUrlInput.addEventListener('input', handleImageUrlChange);
        jsonUploadInput.addEventListener('change', handleJsonUpload);
        downloadJsonBtn.addEventListener('click', downloadRecipes);
        cancelFormBtn.addEventListener('click', () => {
            clearForm();
            showPage('list');
        });

    </script>
</body>
</html>
